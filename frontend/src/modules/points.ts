import { reactive, toRefs, } from 'vue'
import { api, apier } from 'boot/axios'
import { Notify } from 'quasar'
interface OpenStreetServerAns {
  address: {
    road: string;
    house_number: string;
  }
}

interface Point {
  address: string;
  status?: string;
  name?: string;
  coordinates?: number[];
  type?: string;
  breeds?: string[];
  phone?: string;
  link?: string;
  stat?: number;
  workHours?: string;
  services?: string[];
  paymentMethods?: string;
  comment?: string;
}

interface PointType {
  label: string;
  value: string;
  url: string;
}
interface PointsState {
  isLoading: boolean;
  isCurrentLoading: boolean;
  points: Point[],
  marker: Point;
  canEdit: boolean;
  sideOpen: boolean;
  types: PointType[]
}

const state = reactive<PointsState>({
  isLoading: true,
  isCurrentLoading: false,
  points: [],
  marker: {
    address: '',
  },
  canEdit: false,
  sideOpen: true,
  types: [
    {
      label: 'магазин',
      value: 'shop',
      url: 'https://image.flaticon.com/icons/png/128/290/290957.png'
    },
    {
      label: 'вет. клиника',
      value: 'vet',
      url: 'https://image.flaticon.com/icons/png/128/404/404022.png'
    },
    {
      label: 'клуб',
      value: 'club',
      url: 'https://image.flaticon.com/icons/png/128/616/616574.png'
    },
    {
      label: 'опасность',
      value: 'hunt',
      url: 'https://image.flaticon.com/icons/png/128/564/564619.png'
    },
    {
      label: 'приют',
      value: 'shelter',
      url: 'https://image.flaticon.com/icons/png/128/3010/3010995.png'
    },
    {
      label: 'кинологи',
      value: 'handlers',
      url: 'https://image.flaticon.com/icons/png/128/760/760991.png'
    },
    {
      label: 'заводчики',
      value: 'breeders',
      url: 'https://image.flaticon.com/icons/png/128/2922/2922506.png'
    },
  ],
});

export const usePoints = () => {
  const getPoints = (): void => {
    state.isLoading = true;
    api.get<Array<Point>>('/points')
      .then((data) => {
        state.points = data.data.filter(e => e.status == 'approved')
      })
      .catch((error) => {
        console.log(error)
      })
      .finally(() => {
        state.isLoading = false;
      })
  }
  const getAllPoints = (): void => {
    api.get<Array<Point>>('/points')
      .then((data) => {
        state.points = data.data.filter(e => e.status == 'created')
      })
      .catch((error) => {
        console.log(error)
      })
      .finally(() => {
        state.isLoading = false;
      })
  }
  const updateStatus = (id: string, status: string, text: string): void => {
    void api.put(`/points/${id}`, { status }).then(_ => {
      if (_.status == 201) {
        getAllPoints();
        Notify.create({
          type: status == 'declined' ? 'negative' : 'positive',
          message: 'Метка ' + text + (status == 'declined' ? ' отклонена' : 'одобрена'),
          position: 'bottom-right'
        })
      }
    })
  }
  const deletePoint = (id: string):void=>{
    void api.delete(`/points/${id}`).then(_=>{
      if(_.status==201){
        Notify.create({
          type:'positive',
          message: 'Метка удалена',
          position: 'bottom-right',
        })
        location.reload();
      }
    })
  }
  const setMarker = (payload: Point) => {
    state.marker = payload;
  }
  const addNewPoint = (payload: never) => {
    void api.post('/points', payload)
      .then(_ => {
        if (_.status == 201)
          Notify.create({
            type: status == 'declined' ? 'negative' : 'positive',
            message: 'Метка добавлена на карту! Ожидайте модерации',
            position: 'bottom-right'
          })
        else
          throw ''
      })
      .catch(() => {
        Notify.create({
          type: 'negative',
          message: 'Проверьте введенные данные!',
          position: 'bottom-right'
        })
      })
  }
  const setEdit = (payload: boolean) => {
    state.canEdit = payload
  }
  const setSide = () => {
    state.sideOpen = !state.sideOpen
  }
  const getAddress = (lat: number, lng: number) => {
    void apier.get<OpenStreetServerAns>(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`)
      .then(({ data }) => {
        state.marker.address = data.address.road + ', ' + data.address.house_number;
      })
  }
  const breeds = [
    'Австралийская короткохвостая пастушья собака',
    'Австралийская овчарка',
    'Австралийская пастушья собака',
    'Австралийский келпи',
    'Австралийский терьер',
    'Австралийский шелковистый терьер',
    'Австрийская гончая',
    'Австрийский брудастый бракк',
    'Австрийский пинчер',
    'Азавак',
    'Азорская пастушья собака',
    'Аиди',
    'Акита-ину',
    'Алан (порода собак)',
    'Алано',
    'Алапахский бульдог',
    'Алопекис',
    'Альпийская таксообразная гончая',
    'Аляскинский кли-кай',
    'Аляскинский маламут',
    'Американская акита',
    'Американская эскимосская собака',
    'Американский бандог',
    'Американский булли',
    'Американский бульдог',
    'Американский водяной спаниель',
    'Американский голый терьер',
    'Американский кокер-спаниель',
    'Американский мастиф',
    'Американский питбультерьер',
    'Американский стаффордширский терьер',
    'Американский фоксхаунд',
    'Анатолийская овчарка',
    'Английская енотовая гончая',
    'Английская овчарка',
    'Английский бульдог',
    'Английский водяной спаниель',
    'Английский кокер-спаниель',
    'Английский мастиф',
    'Английский пойнтер',
    'Английский сеттер',
    'Английский спрингер-спаниель',
    'Английский той-терьер',
    'Английский фоксхаунд',
    'Англо-французская малая гончая',
    'Андалузский поденко',
    'Аппенцеллер зенненхунд',
    'Аргентинский дог',
    'Арденнский бувье',
    'Артезиано-нормандский бассет',
    'Артуазская гончая',
    'Арьежская гончая',
    'Афганская борзая',
    'Африканис',
    'Аффенпинчер',
    'Баварская горная гончая',
    'Бакхмуль',
    'Барбет (порода собак)',
    'Басенджи',
    'Баскская овчарка',
    'Бассет-хаунд',
    'Бедлингтон-терьер',
    'Белая швейцарская овчарка',
    'Бельгийская овчарка',
    'Бельгийский гриффон',
    'Бергамская овчарка',
    'Бернская гончая',
    'Бернский зенненхунд',
    'Бивер-йоркширский терьер',
    'Бигль',
    'Бишон фризе',
    'Бладхаунд',
    'Блю-лейси',
    'Бобтейл',
    'Болгарский барак',
    'Болоньез',
    'Большой вандейский бассет-гриффон',
    'Большой вандейский гриффон',
    'Большой мюнстерлендер',
    'Большой швейцарский зенненхунд',
    'Бордер-колли',
    'Бордер-терьер',
    'Бордоский дог',
    'Бородатый колли',
    'Босерон',
    'Бостон-терьер',
    'Бразильский терьер',
    'Бразильский фила',
    'Бретонский эпаньоль',
    'Бриар (порода собак)',
    'Брохольмер',
    'Брюссельский гриффон',
    'Буковинская овчарка',
    'Бульдог кампейро',
    'Бульдог Катахулы',
    'Бульмастиф',
    'Бультерьер',
    'Бурбонский бракк',
    'Бурбуль',
    'Бурят-монгольский волкодав',
    'Валенсийский ратер',
    'Вандейский бассет-гриффон',
    'Веймаранер',
    'Вельш-корги',
    'Вельш-спрингер-спаниель',
    'Вельштерьер',
    'Венгерская борзая',
    'Венгерская выжла',
    'Венгерская жесткошёрстная выжла',
    'Вертельная собака',
    'Вест-хайленд-уайт-терьер',
    'Веттерхун',
    'Волчья собака Сарлоса',
    'Вольпино итальяно',
    'Восточноевропейская овчарка',
    'Восточносибирская лайка',
    'Гаванский бишон',
    'Гамильтонстёваре',
    'Гампр',
    'Гладкошёрстный фокстерьер',
    'Глен оф Имаал терьер',
    'Голландская овчарка',
    'Голландский смоусхонд',
    'Голубой гасконский бассет',
    'Гончая Шиллера',
    'Грейхаунд',
    'Гренландская собака',
    'Греческая овчарка',
    'Гриффон Кортальса',
    'Грюнендаль (порода собак)',
    'Далматин',
    'Датско-шведская фермерская собака',
    'Денди-динмонт-терьер',
    'Джек-рассел-терьер',
    'Дзёмон-сиба',
    'Дирхаунд',
    'Длинношёрстный колли',
    'Доберман',
    'Дратхаар',
    'Древер',
    'Дункер (порода собак)',
    'Евразиер',
    'Жесткошёрстный фокстерьер',
    'Западносибирская лайка',
    'Золотистый ретривер',
    'Ирландский водяной спаниель',
    'Ирландский волкодав',
    'Ирландский красный сеттер',
    'Ирландский мягкошёрстный пшеничный терьер',
    'Ирландский терьер',
    'Исландская собака',
    'Испанская водяная собака',
    'Испанская гончая',
    'Испанский гальго',
    'Испанский мастиф',
    'Итальянская гончая',
    'Итальянский бракк',
    'Итальянский спиноне',
    'Йоркширский терьер',
    'Ка-де-бо',
    'Кавалер-кинг-чарльз-спаниель',
    'Кавказская овчарка',
    'Каи (порода собак)',
    'Кан де паллейро',
    'Канадская эскимосская собака',
    'Канарский дог',
    'Кане-корсо',
    'Као де кастро-лаборейро',
    'Каракачанская собака',
    'Карело-финская лайка',
    'Карельская лайка',
    'Карельская медвежья собака',
    'Карликовый пинчер',
    'Каталонская овчарка',
    'Кеесхонд',
    'Керн-терьер',
    'Керри-блю-терьер',
    'Кинг-чарльз-спаниель',
    'Кисю (порода собак)',
    'Китайская хохлатая собака',
    'Китайский чунцин',
    'Кламбер-спаниель',
    'Коикерхондье',
    'Комондор',
    'Континентальный бульдог',
    'Континентальный той-спаниель',
    'Корейский чиндо',
    'Короткошёрстный колли',
    'Котон-де-тулеар',
    'Крашская овчарка',
    'Кромфорлендер',
    'Ксолоитцкуинтли',
    'Кубинский дог',
    'Кувас',
    'Кули (порода собак)',
    'Куньминская овчарка',
    'Кури (собака)',
    'Курцхаар',
    'Курчавошёрстный ретривер',
    'Лабрадор-ретривер',
    'Лабрадудль',
    'Лаготто-романьоло',
    'Лангхаар',
    'Ландсир',
    'Ланкаширский хилер',
    'Левретка',
    'Лейкленд-терьер',
    'Леонбергер',
    'Леопардовая собака Катахулы',
    'Лопарская оленегонная собака',
    'Лхасский апсо',
    'Майоркская овчарка',
    'Малая львиная собака',
    'Малая швейцарская гончая',
    'Малые бельгийские собаки',
    'Малый вандейский бассет-гриффон',
    'Малый мюнстерлендер',
    'Мальтийская болонка',
    'Манчестер-терьер',
    'Мареммо-абруццкая овчарка',
    'Махореро',
    'Меделян',
    'Миниатюрная американская овчарка',
    'Миттельшнауцер',
    'Мопс',
    'Московская сторожевая',
    'Муди (порода собак)',
    'Нагази',
    'Неаполитанский мастиф',
    'Немецкая овчарка',
    'Немецкий боксёр',
    'Немецкий вахтельхунд',
    'Немецкий дог',
    'Немецкий пинчер',
    'Немецкий шпиц',
    'Немецкий штихельхаар',
    'Немецкий ягдтерьер',
    'Ненецкая лайка',
    'Новозеландская овчарка',
    'Новошотландский ретривер',
    'Норботтен-шпиц',
    'Норвежский бухунд',
    'Норвежский лундехунд',
    'Норвежский серый элкхунд',
    'Норвежский чёрный элкхунд',
    'Норвич-терьер',
    'Норфолк-спаниель',
    'Норфолк-терьер',
    'Ньюфаундленд (порода собак)',
    'Овернский бракк',
    'Одис',
    'Оттерхаунд',
    'Пагль',
    'Папийон',
    'Парсон-рассел-терьер',
    'Паттердейл-терьер',
    'Пекинес',
    'Перуанская голая собака',
    'Пикардийская овчарка',
    'Пикардийский спаниель',
    'Пиренейская горная собака',
    'Пиренейская овчарка',
    'Пиренейский мастиф',
    'Поденко ибиценко',
    'Поденко канарио',
    'Польская гончая',
    'Польская низинная овчарка',
    'Польская подгалянская овчарка',
    'Польский огар',
    'Польский харт',
    'Померанский шпиц',
    'Помски',
    'Португальская водяная собака',
    'Португальская овчарка',
    'Португальский поденгу',
    'Пражский крысарик',
    'Прямошёрстный ретривер',
    'Пти-брабансон',
    'Пудель',
    'Пули',
    'Пуми (порода собак)',
    'Пхунсан',
    'Раджапалайям (порода собак)',
    'Рафейру ду Алентежу',
    'Ризеншнауцер',
    'Родезийский риджбек',
    'Ротвейлер',
    'Румынская карпатская овчарка',
    'Румынская миоритская овчарка',
    'Русская гончая',
    'Русская псовая борзая',
    'Русская салонная собака',
    'Русская цветная болонка',
    'Русский охотничий спаниель',
    'Русский той',
    'Русско-европейская лайка',
    'Рэт-терьер',
    'Рюкю (порода собак)',
    'Салюки',
    'Самоедская собака',
    'Сахалинский хаски',
    'Северная инуитская собака',
    'Сенбернар',
    'Сиба-ину',
    'Сибирский хаски',
    'Сикоку (порода собак)',
    'Силихем-терьер',
    'Скайтерьер',
    'Словацкий копов',
    'Словацкий чувач',
    'Слюги',
    'Смоландская гончая',
    'Среднеазиатская овчарка',
    'Средний вандейский гриффон',
    'Староанглийский бульдог',
    'Староанглийский бульдог (заново созданный)',
    'Староанглийский терьер',
    'Стародатский пойнтер',
    'Стаффордширский бультерьер',
    'Суссекс-спаниель',
    'Схипперке',
    'Тазы (порода собак)',
    'Тайваньская собака',
    'Тайган (порода собак)',
    'Тайский бангку',
    'Тайский риджбек',
    'Такса',
    'Тедди-рузвельт-терьер',
    'Тентерфилд-терьер',
    'Течичи',
    'Тибетский мастиф',
    'Тибетский спаниель',
    'Тибетский терьер',
    'Той-бульдог',
    'Той-фокстерьер',
    'Торньяк',
    'Тоса-ину',
    'Трансильванская гончая',
    'Тувинская овчарка',
    'Уиппет',
    'Уругвайский симаррон',
    'Уэльская овчарка',
    'Фален',
    'Фараонова собака',
    'Фарфоровая гончая',
    'Филд-спаниель',
    'Финская гончая',
    'Финский лаппхунд',
    'Финский шпиц',
    'Фландрский бувье',
    'Фокстерьер',
    'Французский бульдог',
    'Французский спаниель',
    'Ханаанская собака',
    'Харьер',
    'Хеллефорсхунд',
    'Ховаварт',
    'Хоккайдо (порода собак)',
    'Хорватская овчарка',
    'Хортая борзая',
    'Цвергшнауцер',
    'Чау-чау',
    'Чёрно-подпалый кунхаунд',
    'Чёрный терьер',
    'Чесапик-бей-ретривер',
    'Чехословацкая волчья собака',
    'Чешская пастушья собака',
    'Чешский терьер',
    'Чинук (порода собак)',
    'Чирнеко дель Этна',
    'Чихуахуа',
    'Чукотская ездовая',
    'Шапендуа',
    'Шарпей',
    'Шарпланинская овчарка',
    'Шведский белый элкхунд',
    'Шведский вальхунд',
    'Шведский лаппхунд',
    'Швейцарская гончая',
    'Шелковистый виндхаунд',
    'Шелти',
    'Ши-тцу',
    'Шотландский сеттер',
    'Шотландский терьер',
    'Энтлебухер зенненхунд',
    'Эрдельтерьер',
    'Эстонская гончая',
    'Эштрельская овчарка',
    'Южнорусская овчарка',
    'Юрская гончая',
    'Якутская лайка',
    'Ямтхунд',
    'Японский терьер',
    'Японский хин',
    'Японский шпиц'
  ]
  return {
    getPoints,
    getAllPoints,
    setMarker,
    addNewPoint,
    setEdit,
    setSide,
    getAddress,
    updateStatus,
    breeds,
    deletePoint,
    ...toRefs(state)
  }
};


